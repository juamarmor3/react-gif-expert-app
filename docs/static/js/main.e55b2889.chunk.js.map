{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","placeholder","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","fixed_width","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","element","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAOP,GAAP,mBAAuBO,OAChDN,EAAc,MAMlB,SACI,uBACIO,YAAY,YACZC,KAAK,OACLC,MAAQV,EACRW,SAjBc,SAACR,GAAD,OAAOF,EAAeE,EAAES,OAAOF,a,+BCPhDG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,YAAYZ,QAXlB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IACtC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WAENxB,EAASC,GAAWwB,MACjB,SAAAC,GAAI,OAAIH,EAAU,CACdf,KAAMkB,EACNL,SAAS,SAGjB,CAACpB,IAGGqB,EDf4BK,CAAa1B,GAAlCa,EAFuB,EAE7BN,KAAea,EAFc,EAEdA,QAGvB,OACI,qCACA,mCAAOpB,EAAP,OACEoB,GAAW,4CACR,qBAAKJ,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAkB,GAAO,OACd,cAAC,EAAD,eAEOA,GADAA,EAAQhB,aEctBiB,MA3Bf,WAAyB,IAAD,EAEgB3C,mBAAS,CAAC,cAF1B,mBAEbQ,EAFa,KAEDT,EAFC,KAKpB,OACI,qCACI,kDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQS,EAAWgB,KAAK,SAAAkB,GAAO,OACvB,cAAC,EAAD,CACI3B,SAAW2B,GACLA,Y,MCd9BE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e55b2889.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => setInputValue( e.target.value );\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( categories => [  inputValue , ...categories] );\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                placeholder=\"buscar...\"\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=OC7sG3bLPWoCiqcf15ezU5fcneicdaeu`;\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.fixed_width.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images , loading } = useFetchGifs(category);\r\n    \r\n\r\n    return (\r\n        <>\r\n        <h3> { category } </h3> \r\n        { loading && <p>Cargando...</p> }\r\n             <div className=\"card-grid\">\r\n             {\r\n                 images.map( element => (\r\n                      <GifGridItem \r\n                        key={element.id} \r\n                        { ...element } \r\n                      /> \r\n                 ))\r\n             } \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs( category ).then(\r\n           imgs => setState ({\r\n               data: imgs,\r\n               loading: false\r\n           })\r\n        )\r\n    }, [category]);\r\n\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nfunction GifExpertApp() {\r\n\r\n    const [categories, setCategories] = useState(['One Piece'])\r\n  \r\n\r\n    return (\r\n        <>\r\n            <h2> Gif Expert App </h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( element => \r\n                    <GifGrid \r\n                        category={ element } \r\n                        key={ element }\r\n                     /> )\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nGifExpertApp.propTypes = { }\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}